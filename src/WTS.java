/*Algorithm Assignment
By Owen, Kevin and Jatin
May 7th, 2018
We made a game implementing the Random Walk algorithm*/

import java.io.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import javax.sound.sampled.*;

public class WTS {
	public static int xCord;//Current x- and y-coordinates of the player
	public static int yCord;
	public static int xCordCustomer;//X- and y- position of the customer
	public static int yCordCustomer;
	public static int dir = 3;
	public static int[] order = {0,0,0,0,0,0};//This array will hold Mario's order (what the player needs to collect)
	public static int[] taco = {0,0,0,0,0,0};//This array will keep track of what the player collects, and in the end we'll compare it to the order and see if its right
	public static int[][] level;//To hold the pattern generated by mapMaker. See mapMaker()	
	public static JFrame frame;//These 3 window components are public, because we modify them in the key press class as well as in here. They're all on the main game window
	public static JPanel bottomPanel;
	public static JLabel tacoBox;
	public static JLabel[][] labelGrid;//Array of labels, works parallel to level[][] See createAndShowGUI()
	public static Random RNG = new Random();//To use when generating random values. Unlike mario 64, this RNG can't be manipulated for crazy glitches and stuff
	public static InputStream stream;//Kind of like bufferedReader, we use it to read the data from our font file
	public static Font burrito;//Speaking of our font file, it'll be stored in this object, which we've called burrito because it's the burrito font
	public static Font roboto;//another font file we use
	public static Clip clip;//To hold whatever audio file we use

	public static void music(int track){//Yay music!
		//This function is always called with an int representing which track to play
		//0 -> Main game music (menu and game screens)
		//1 -> Music for winning ("you win" screen)
		//2 -> Music for losing ("game over" screen)
		String path = "";//String to hold the path to whichever track we choose
		if (track == 0){
			path = "msk/mexico.wav";//Play the main track
		}
		else if (track == 1){
			path = "msk/wallelujah.wav";//Play the track for winning
		}
		else if (track == 2){
			path = "msk/smw_die.wav";//Play the track for losing
		}
		File file = new File(path);//Make a file object with the path we came up with
	    try {
	        stopMusic();//stop any music that's already playing
	        AudioInputStream inputStream = AudioSystem.getAudioInputStream(file);//Find our file
	        clip = AudioSystem.getClip();//turn it into a clip object
	        clip.open(inputStream);//open it
	        clip.start();//start it
	    } catch (Exception e) {
	        stopMusic();//if something goes horribly wrong stop the music
	    }
	}

	public static void stopMusic(){
	    if (clip != null) {//If there is any track running...
	        clip.stop();//stop it
	        clip.close();//close it
	        clip = null;//reset our clip object
	    }
	}

	public static int[][] mapMaker(){
		/*Map maker uses a 2d array to create a grid our player can navigate
		It does this by setting each spot t oa specific value. The ones we use are:
		0 - Wall(can't walk on it)
		1 - Floor(also can't walk on it..... kidding)
		2 - Player's starting location(acts as normal floor)
		3 - Customer's staring location(can't be walked on, that's mean)
		4-9 - different tacos
		*/

		int dimensions = 15;//Represents the width and height of the grid. Our grid is gonna be a 15x15 square
	    int maxTunnels = 50;//The maximum amount of 'tunnels.' Higher or lower influences how many spaces on the grid are open floor vs wall
	    int maxLength = RNG.nextInt(3)+2;//Maximum length of each tunnel. By choosing a random number between 2 and 5, we allow for either really small or large maps. You'll see when you play it
	    int[][] map = new int[dimensions][dimensions];//Make a 2d array to represent our game grid, with the proper dimensions
	    //These two represent the current row and column we are working in. Initializing them like this means the grid-maker starts in a different spot every time
	    int currentRow = (RNG.nextInt(dimensions));
	    int currentCol = (RNG.nextInt(dimensions));	    
	    //This 2d array is kinda cool. Basically the 4 elements represent the 4 compass directions (north, south, east, west)
	    int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
	    //To store the previous direction the grid-maker moved in. When we chose a new one, we want it to be different
	    int[] lastDir = new int[2];
	    //Stores that new direction
	    int[] randDir = new int[2];

	    while (maxTunnels>0){//The maxTunnels variable goes down by 1 each time a new tunnel is made, so stop when we've reached the limit
	    	do{
	    		randDir = directions[RNG.nextInt(directions.length)];//Choose a random direction to move in...
	    	}while((randDir[0]==lastDir[0]*-1 && randDir[1] == lastDir[1]*-1 || randDir[0]==lastDir[0] && randDir[1] == lastDir[1]));//...so long as its perpendicular to the last one

	    	int randLength = RNG.nextInt(maxLength)+1;//Choose a random length for the next tunnel. +1 to ensure there are no 0-length tunnels cause thats just weird
	    	int tunnelLength = 0;//Length of the tunnel we are making right now. It'll increase until it's reached randLength

	    	while(tunnelLength<randLength)//I told you so
	    	{
	    		if (((currentRow == 0) && (randDir[0] == -1)) || ((currentCol == 0) && (randDir[1] == -1)) ||((currentRow == dimensions - 1) && (randDir[0] == 1)) || ((currentCol == dimensions - 1) && (randDir[1] == 1))) {
		          break;
		          //Holy crap thats a lot of conditions.
		          //Basically we're checking to make sure we don't try and tunnel beyond the bounds of the grid. If we are, break out of the loop. Tunnel complete.
		        }
		        else{
		        	map[currentCol][currentRow] = 1;//Set the current spot to 1, which represents walkable floor
		        	currentRow += randDir[0]; //Add the 2 values from our current direction vector (physics flashbacks) to the currentRow/Column variables
		          	currentCol += randDir[1];//These values are either 1, 0, or -1. This sets our location to the next place
		          	tunnelLength++; //Tunnel is now a little bit longer
		        }
	    	}	    		    	

	    	if (tunnelLength==maxLength){//If we've reached the length...	    	
		 		lastDir = randDir;//Save our last direction
		 		maxTunnels--;//One less tunnel to make
		 	}
		 	//aaaaaaaand repeat
	    }

	    /*now that we've made our map of 1s(floor) and 0s (walls), we can start placing in the other stuff, like Waluigi.*/

	    Boolean playerSpawned = false;//We haven't placed Waluigi anywhere yet
	    Boolean customerSpawned = false;//Haven't placed anyone else yet either...
	    int tacoCount = 4;//Used to place the tacos

	    /*Loop to place Waluigi in a random spot*/
		while (playerSpawned==false) {			
			xCord = RNG.nextInt(15);//Choose a random place to spawn our boy Waluigi
			yCord = RNG.nextInt(15);
			if (map[xCord][yCord]==1)//Make sure it's walkable floor
			{
				map[xCord][yCord]=2;//Set our spawn location to "2," that way we know it's waluigi
				playerSpawned = true;//Yay we spawned him
			}
			//repeat until we've found a home for poor waluigi
		}
		/*Loop to place Mario in a random spot*/
		while (customerSpawned==false) {
			//Same as above loop, except we set the customer's spot to 3 instead of 2.			
			xCordCustomer = RNG.nextInt(15);
			yCordCustomer = RNG.nextInt(15);
			if (map[xCordCustomer][yCordCustomer]==1)
			{
				map[xCordCustomer][yCordCustomer]=3;
				customerSpawned = true;
			}
		}
		/*Loop to place all of the tacos*/
		while (tacoCount!=10){//The taco counter starts at 4 (cause remember how tiles with #s 4-9 are the different ingredients?). Go until it gets to 10
			int randX = RNG.nextInt(15);//Choose a random x-y spot on the grid
			int randY = RNG.nextInt(15);
			if (map[randX][randY]==1) {//make sure that spot is open floor, we dont want to have a random taco in the middle of the wall
				map[randX][randY] = tacoCount;//set that tile to whatever taco we're on
				tacoCount++;//next taco
			}
		}

		/*Now that we've placed everything we have to place, we're done!*/
	    return map;//We've made our map
	}	

	public static int[] sort(int[] array){
		/*Standard plain old bubble sorting. 
		We use it to sort the array of Mario's order as well as the array of the items Waluigi has collected so far. 
		By keeping them both sorted it's easier to compare the 2 and see if Waluigi got all the right stuff*/    	
	    int iterations = 0;
	    for (int x = 0; x<array.length; x++) {
	    	for (int y = 0; y<array.length-1; y++) {
	    		if (array[y]>array[y+1]) {
	    			int temp = array[y+1];
	    			array[y+1] = array[y];
	    			array[y] = temp;
	    		}
	    		iterations++;	   		
	    	}
	    }	   
	    return array;
	}

	public static void createAndShowGameOver(){//This is the little game over screen
		music(2);//play game over music
		WTS.frame.setVisible(false);//Hide the frame that's on screen right now. (game screen disappears, then message pops up. This means the user can't keep playing after the message appears)
		//If we don't do this UIManager thing it gets the default Java look, which is super ugly
		try {
            // Set System L&F
	        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	    }
	    catch (UnsupportedLookAndFeelException e) {}//Catch all those pesky errors, which really should never show up anyways but it won't let me run the program if it doesn't have them
	    catch (ClassNotFoundException e) {}
	    catch (InstantiationException e) {}
	    catch (IllegalAccessException e) {}

	    frame = new JFrame("Waluigi's Taco Stand 2");//initialize the frame with the proper title
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);//Don't do anything when the window is closed, cause we got special code for that below.
		frame.addWindowListener(new java.awt.event.WindowAdapter() {//Stuff that will happen when they try to close the window
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent e) {//When they close the little message we'll send em back to the menu
		       	frame.setVisible(false);//Hide the current frame
		       	createAndShowMenu();//show the menu
		    }
		});
		frame.setIconImage(new ImageIcon("img/taco.png").getImage());//set an icon to show in the taskbar, etc
        frame.setPreferredSize(new Dimension(230, 80));//Set the size of the window
        frame.setLocation(new Point(400, 300));//Set the location
        frame.setResizable(false);//User can't change the size

        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 5));//Panel to hold everything. layout will align everything to the left
        frame.getContentPane().add(panel);//add the panel to the frame
        panel.setSize(new Dimension(750, 700));//set it's size
        panel.setBackground(Color.darkGray);//and colour

        JLabel message = new JLabel("  Game Over!");//label with a sad message. oops
        panel.add(message);//add the label to the panel
        message.setFont(burrito.deriveFont(30f));//Set the font size to 30. the 'f' means it's a floating point number
        message.setForeground(Color.white);//Text colour is white

        ImageIcon icon = new ImageIcon("img/mario_die.gif");//Import that lovely dying mario gif
        JLabel pic = new JLabel(icon);//Another label with that image of dying mario
        pic.setSize(new Dimension(100, 100));//Set it's size
        panel.add(pic);//and add it to the panel

        JFrame.setDefaultLookAndFeelDecorated(false);//Same old stuff for looks
        frame.pack();        
        frame.setVisible(true);//We can see it now        
	}

	public static void createAndShowYouWin(){//This is the little game over screen
		music(1);//play our memey music for winning. its great, you'll love it
		WTS.frame.setVisible(false);//Hide the frame that's on screen right now. (game screen disappears, then message pops up. This means the user can't keep playing after the message appears)
		//If we don't do this UIManager thing it gets the default Java look, which is super ugly
		try {
            // Set System L&F
	        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	    }
	    catch (UnsupportedLookAndFeelException e) {}//Catch all those pesky errors, which really should never show up anyways but it won't let me run the program if it doesn't have them
	    catch (ClassNotFoundException e) {}
	    catch (InstantiationException e) {}
	    catch (IllegalAccessException e) {}
	    frame = new JFrame("Waluigi's Taco Stand 2");//Window title
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);//Do nothing when they hit close, cause we got something special instead
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent e) {//This'll fire when they hit close
		       	frame.setVisible(false);//hide the frame
		       	createAndShowMenu();//show the menu frame
		    }
		});
		frame.setIconImage(new ImageIcon("img/taco.png").getImage());//icon thats shown in the taskbar, etc
        frame.setPreferredSize(new Dimension(200, 80));//Set the size of the frame
        frame.setLocation(new Point(400, 300));//Set the location
        frame.setResizable(false);//Can't change the size

        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 5));//Panel to hold everything. layout will align everything to the left
        frame.getContentPane().add(panel);//add the panel to the frame
        panel.setSize(new Dimension(700, 700));//set it's size
        panel.setBackground(Color.darkGray);//and colour

        JLabel message = new JLabel("  You Win!");//label with a happy message. 
        panel.add(message);//add the label to the panel
        message.setFont(burrito.deriveFont(30f));//Set the font size to 30. the 'f' means it's a floating point number
        message.setForeground(Color.white);//Text colour is white


        ImageIcon icon;
        if(RNG.nextBoolean() == true){//get a random bool value and use that random bool to decide which happy mario we show. theres a 50/50 chance
        	icon = new ImageIcon("img/mario_thumb.gif");//Thumbs up. he approves
        }
        else{
	        icon = new ImageIcon("img/mario_clap.gif");//Round of applause
	    }
        JLabel pic = new JLabel(icon);//Label with whatever image we chose
        pic.setSize(new Dimension(100, 100));//Set it's size
        panel.add(pic);//and add it to the panel

        JFrame.setDefaultLookAndFeelDecorated(false);//Same old stuff for looks
        frame.pack();        
        frame.setVisible(true);//We can see it now        
	}

	public static void createAndShowMenu(){//Main menu for the game
		music(0);//play the standard cliche mexican music
		frame = new JFrame("Waluigi's Taco Stand 2");//Frame is the window
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//This means the program will exit when you close it. wow
        frame.setPreferredSize(new Dimension(800, 600));//set window size
        frame.setLocation(new Point(300, 30));//Set the location
        frame.setResizable(false);//no changing the size. We're mean like that
        frame.setIconImage(new ImageIcon("img/taco.png").getImage());//icon for the window

        bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 5));//Panel to hold everything. This one is at the bottom of the frame
        frame.getContentPane().add(bottomPanel);//add the panel
        bottomPanel.setSize(new Dimension(800, 150));//set it's size
        bottomPanel.setLocation(new Point(0, 450));//set it's size
        bottomPanel.setBackground(Color.black);//and colour

        ImageIcon icon = new ImageIcon("img/playsmall.png");//play button image   
        JLabel play = new JLabel(icon);//add image to a label
        play.setSize(new Dimension(100, 300));//Set it's size
        play.setLocation(new Point(0,600));//location of the label
        play.setHorizontalAlignment(SwingConstants.LEFT);//align it to the left side
        play.addMouseListener(new MouseAdapter() //Here's some mouse events for the play label 
		{  
		    public void mouseClicked(MouseEvent e)//What happens when it's clicked
		    {  		       
		    	Component component = (Component) e.getSource();//Find the label that was clicked
		    	JFrame frame = (JFrame) SwingUtilities.getRoot(component);//Find the parent frame of that label that was clicked (the menu frame)
			    frame.setVisible(false);//Get rid of it
		       	level = mapMaker();//Generate a new map
		       	taco = new int[]{0,0,0,0,0,0};//Reset Mario's order and Waluigi's list of collected stuff
		       	order = new int[]{0,0,0,0,0,0};
		       	generateOrder();//Make a new order for Mario
		       	order = sort(order);//Sort his order so its from small to big
		       	createAndShowGame(level);//Show the game frame, give it our new map
		    }  
		    public void mouseEntered(MouseEvent e)//Next 2 events are for the mouse hovering over it
		    {  
		    	//When the mouse hovers over the label change the image
		    	ImageIcon icon = new ImageIcon("img/playHighlight.png");//Alt image for when the mouse is overtop the label
		    	JLabel lbl = (JLabel) e.getComponent();//Find the label that's hovered over
		    	lbl.setIcon(icon);//Change the image to the alt one
		    } 
		    public void mouseExited(MouseEvent e)  
		    {  
		    	//when the mouse leaves the label we change it back to normal
		    	ImageIcon icon = new ImageIcon("img/playsmall.png");//get the original image over here
		    	JLabel lbl = (JLabel) e.getComponent();//get the right label
		    	lbl.setIcon(icon);//set the image
		    } 
		}); 
        bottomPanel.add(play);//add the play button to the panel

        JLabel middle = new JLabel("                                                            ");//This panel goes between the 2 buttons so theres space between them
        bottomPanel.add(middle);

        icon = new ImageIcon("img/helpsmall.png");//import the help button image   
        JLabel help = new JLabel(icon);//set it to another label
        help.setSize(new Dimension(100, 300));//Set it's size
        help.setLocation(new Point(0,600));//set the location
        help.setHorizontalAlignment(SwingConstants.RIGHT);//align to the right
        help.addMouseListener(new MouseAdapter() //code for when the mouse interacts with the help button
		{  
		    public void mouseClicked(MouseEvent e)//When it's clicked  
		    {  		       
		    	try{
					//Try and send them to our website
		    		java.awt.Desktop.getDesktop().browse(new java.net.URI("http://www.sdsscomputers.com/OwenGoodwin/ASSIGNMENTS/COMPLETED/Unit3Assignment/AlGore/index.html"));
		    	}catch(Exception roblox)
		    	{
		    		//If we can't send them to the website show them an error message telling the user exactly what went wrong..... sort of
		    		System.out.println("oh noes");
		    	}
		    }  
		    public void mouseEntered(MouseEvent e) //When the mouse is over the button
		    {  
		    	ImageIcon icon = new ImageIcon("img/helpHighlight.png");//Get the alt image
		    	JLabel lbl = (JLabel) e.getComponent();//Get the label
		    	lbl.setIcon(icon);//alt image+label = cool stuff
		    } 
		    public void mouseExited(MouseEvent e)  
		    {  
		    	ImageIcon icon = new ImageIcon("img/helpsmall.png");//Get the OG image
		    	JLabel lbl = (JLabel) e.getComponent();//and the label
		    	lbl.setIcon(icon);//put everything back to normal
		    } 
		}); 
        bottomPanel.add(help);//add the label to the panel

		
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));//another panel. this one is on the top part of the frame
        frame.getContentPane().add(panel);//Add the panel to the window
        panel.setSize(new Dimension(800, 400));//Set its size
        panel.setBackground(Color.darkGray);//and colour

        icon = new ImageIcon("img/title.png");//big title image yay    
        JLabel pic = new JLabel(icon);//put it in a label
        pic.setSize(new Dimension(100, 100));//Set it's size
        panel.add(pic);//and add it to the panel      

        JFrame.setDefaultLookAndFeelDecorated(true);//Some stuff to make it look good
        frame.pack();        
        frame.setVisible(true);//show the window!
	}

	public static void createAndShowGame(int[][] underGrid){//This is the main game window. we give it the map from mapMaker(), calling it underGrid
        //Create and set up the window.
        try {
            // Set System L&F
	        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	        //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
	    }
	    catch (UnsupportedLookAndFeelException e) {}//Catch all those pesky errors, which really should never show up anyways but it won't let me run the program if it doesn't have them
	    catch (ClassNotFoundException e) {}
	    catch (InstantiationException e) {}
	    catch (IllegalAccessException e) {}
        frame = new JFrame("Waluigi's Taco Stand 2");//Frame is the window
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);//Do nothing when they hit close, cause we got something special instead
		frame.addWindowListener(new java.awt.event.WindowAdapter() {
		    @Override
		    public void windowClosing(java.awt.event.WindowEvent e) {//When they hit close...
		       	frame.setVisible(false);//hide the window
		       	createAndShowMenu();//and show the menu
		    }
		});
        frame.setPreferredSize(new Dimension(705, 875));//set window size
        frame.setLocation(new Point(300, 5));//Set the location
        frame.addKeyListener(new OwensFirstKeyListener());//This makes it able to listen for key presses by adding the keyListener class I made. see waaaaaaaay below
        frame.setResizable(false);//can't change the size, because if you did the grid would get completely messed. That being said it would be pretty funny to see someone try and play on a messed up grid
        frame.setIconImage(new ImageIcon("img/taco.png").getImage());//icon for the window
        frame.getContentPane().setLayout(new BorderLayout());//Layout stuff

        JMenuBar menuBar = new JMenuBar();//A menubar that usually goes at the top of a program, except ours is going at the bottom
        JMenu menu = new JMenu("                                                                    List of Tacos");//Only item on the bar
		menu.setOpaque(true);//solid color
		menu.setPreferredSize(new Dimension(705, 30));//goes all the way across the screen, reasonable height
		menu.setFont(burrito.deriveFont(20f));//Font size is 30
		menu.setBackground(Color.black);//black background
		menu.setForeground(Color.white);//white text
		menuBar.add(menu);//add the thing to the menubar

		JMenuItem item1 = new JMenuItem("Sonic Special", new ImageIcon("img/tacoBlue.png"));//item1-6 are basically items in the dropdown (dropup?) that give the name of each taco and an image of it
		item1.setOpaque(true);
		item1.setBackground(Color.black);
		item1.setForeground(Color.white);
		item1.setFont(burrito.deriveFont(20f));//Font size is 30
		item1.setPreferredSize(new Dimension(685, 55));
		menu.add(item1);

		JMenuItem item2 = new JMenuItem("Game n Eat", new ImageIcon("img/tacoGB.png"));
		item2.setOpaque(true);
		item2.setBackground(Color.black);
		item2.setForeground(Color.white);
		item2.setFont(burrito.deriveFont(20f));//Font size is 30
		item2.setPreferredSize(new Dimension(685, 55));
		menu.add(item2);

		JMenuItem item3 = new JMenuItem("Luigi's Lucky Taco", new ImageIcon("img/tacoGreen.png"));
		item3.setOpaque(true);
		item3.setBackground(Color.black);
		item3.setForeground(Color.white);
		item3.setFont(burrito.deriveFont(20f));//Font size is 30
		item3.setPreferredSize(new Dimension(685, 55));
		menu.add(item3);

		JMenuItem item4 = new JMenuItem("Signature", new ImageIcon("img/tacoOG.png"));
		item4.setOpaque(true);
		item4.setBackground(Color.black);
		item4.setForeground(Color.white);
		item4.setFont(burrito.deriveFont(20f));//Font size is 30
		item4.setPreferredSize(new Dimension(685, 55));
		menu.add(item4);

		JMenuItem item5 = new JMenuItem("WAHpper", new ImageIcon("img/tacoPurple.png"));
		item5.setOpaque(true);
		item5.setBackground(Color.black);
		item5.setForeground(Color.white);
		item5.setFont(burrito.deriveFont(20f));//Font size is 30
		item5.setPreferredSize(new Dimension(685, 55));
		menu.add(item5);

		JMenuItem item6 = new JMenuItem("Flamin' Hot Fire Flower", new ImageIcon("img/tacoRed.png"));
		item6.setOpaque(true);
		item6.setBackground(Color.black);
		item6.setForeground(Color.white);
		item6.setFont(burrito.deriveFont(20f));//Font size is 30
		item6.setPreferredSize(new Dimension(685, 55));
		menu.add(item6);
		
		frame.getContentPane().add(menuBar, BorderLayout.SOUTH);//add the menubar to the panel at the bottom (south)

        bottomPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 5));//panel on the bottom part of the frame that shows what mario want all that 
        frame.getContentPane().add(bottomPanel);//add the panel
        bottomPanel.setSize(new Dimension(750, 200));//set it's size
        bottomPanel.setLocation(new Point(0, 685));//set it's size
        bottomPanel.setBackground(Color.black);//and colour

        JLabel mario = new JLabel("    Mario wants                                                        ");//this label will never change
        mario.setBackground(Color.black);//Black background
        mario.setForeground(Color.white);//White text
        mario.setFont(burrito.deriveFont(30f));//Font size is 30
        bottomPanel.add(mario);//add it to the panel

        String mariosOrder = "      ";//string to hold mario's order. couple spaces to start with

        for (int x = 0; x<order.length; x++) {//loop through the array
        	if (order[x]==4){//depending on which taco he wants, add that tacos name to the string
        		mariosOrder+="Sonic Special, ";
        	}
        	else if (order[x]==5){
        		mariosOrder+="Game n Eat, ";
        	}
        	else if (order[x]==6){
        		mariosOrder+="Luigi's Lucky Taco, ";
        	}
        	else if (order[x]==7){
        		mariosOrder+="Signature, ";
        	}
        	else if (order[x]==8){
        		mariosOrder+="WAHpper, ";
        	}
        	else if (order[x]==9){
        		mariosOrder+="Flamin' Hot Fire Flower, ";
        	}
        }

        mariosOrder = mariosOrder.substring(0, mariosOrder.length()-2);//This will trim the comma after the last taco in the order

        JLabel orderBox = new JLabel(mariosOrder+"                                                                                                                                      ");  //label with mario's order and a bunch of spaces to make sure it takes up the whole width of the window      
        orderBox.setBackground(Color.black);//Black background
        orderBox.setForeground(Color.white);//White text
        orderBox.setFont(roboto.deriveFont(16f));//Font size is 30
        bottomPanel.add(orderBox);//add it to the panel

        JLabel youHave = new JLabel("    You have                                                                                     ");//This label won't ever change either
        youHave.setBackground(Color.red);//Black background 
        youHave.setForeground(Color.white);//White text
        youHave.setFont(burrito.deriveFont(30f));//Font size 30
        bottomPanel.add(youHave);//add it to the panel

        tacoBox = new JLabel("                                                                                                                                                            ");//This label shows everything Waluigi has collected, again with a million spaces so stuff after it is below it
        tacoBox.setBackground(Color.red);//Black background
        tacoBox.setForeground(Color.white);//White text
        tacoBox.setFont(roboto.deriveFont(16f));//Font size 30
        bottomPanel.add(tacoBox);//add it to the panel

        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));//Panel #2 lives on the top part of the frame. It holds all the labels of the 15x15 grid
        frame.getContentPane().add(panel);//Add the panel to the window
        panel.setSize(new Dimension(750, 700));//Set its size
        panel.setBackground(Color.black);//and colour

        for (int x = 0; x<15; x++) {//Little for loop here because kevin said we needed more for loops. It also makes the game look a little better
        	//Basically we add a bunch of empty black labels to the top of the window so theres a black border all the way around the game. Otherwise the game goes right up against the top bar and thats ugly.
	    	JLabel extra = new JLabel("               ");//they're empty
	    	extra.setBackground(Color.black);//and black
	    	panel.add(extra);//add em
        }

        /*Ok, this part is cool. We make a 2d array of LABELS
        This array will be parallel to the one mapMaker made (called underGrid here)
        Depending on the value at undergrid[x][y], the image at labelGrid[x][y] will change.
        Remeber the different values we used in mapMaker? Here's where they come into play*/
        labelGrid = new JLabel[underGrid.length][underGrid.length];//Make the array
        //Loop through each label, this is how we set the image in each label
        for (int j = 0; j < 15; j++){
	        for (int i = 0; i < 15; i++){
	            labelGrid[i][j] = new JLabel();//Set the current spot to a plain old blank label
	            labelGrid[i][j].setPreferredSize(new Dimension(44, 44));//Every image in the game is 44x44, so it's nice if the labels are too
	            labelGrid[i][j].setOpaque(true);//They ain't see-through

	            if(underGrid[i][j]==0){
	            	//if mapMaker set this spot to 0, it's a wall
	            	ImageIcon icon = new ImageIcon("img/wall.png");//so give it our wall image (solid grey)
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==2)
	            {
	            	//if mapMaker said this is 2, it's where waluigi starts
	            	ImageIcon icon = new ImageIcon("img/down.png");//so put waluigi here
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==3)
	            {
	            	// if mapMaker said this is 3, its where our customer is
	            	ImageIcon icon = new ImageIcon("img/mario_front.png");//so put mario in 
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==4)
	            {
	            	// if mapMaker said this is 4, its a sonic special
	            	ImageIcon icon = new ImageIcon("img/tacoBlue.png");//so put a picture of it
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==5)
	            {
	            	// if mapMaker said this is 3, its a game n eat
	            	ImageIcon icon = new ImageIcon("img/tacoGB.png");//so put a picture of it
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==6)
	            {
	            	// if mapMaker said this is 3, its a luigi taco
	            	ImageIcon icon = new ImageIcon("img/tacoGreen.png");//so put a picture of it
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==7)
	            {
	            	// if mapMaker said this is 3, its a signature
	            	ImageIcon icon = new ImageIcon("img/tacoOG.png");//so put a picture of it
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==8)
	            {
	            	// if mapMaker said this is 3, its the purple one
	            	ImageIcon icon = new ImageIcon("img/tacoPurple.png");//so put a picture of it
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else if (underGrid[i][j]==9)
	            {
	            	// if mapMaker said this is 3, its a spicy meatball
	            	ImageIcon icon = new ImageIcon("img/tacoRed.png");//so put mario in 
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            else{
	            	//otherwise mapMaker must've said its 1
	            	ImageIcon icon = new ImageIcon("img/floor.png");//so we give it our plain old floor image
	            	labelGrid[i][j] = new JLabel(icon);
	            }
	            panel.add(labelGrid[i][j], BorderLayout.CENTER);//Add the current label to the panel
	        }
	    }
	    
        frame.pack();        
        frame.setVisible(true);//show the window!
    }

    public static void generateOrder(){//Come up with a totally random order for Mario
        int orderComplex = RNG.nextInt(5)+2;//Complexity of the order(how many different tacos does mario want?)
		for (int x = 0; x<orderComplex; x++) {//Loop will iterate for as many times as the number of tacos mario wants
			order[x] = RNG.nextInt(6)+4;//Get a random between 4 and 9
			/*So you see all these if statements and while loops?
			Basically what they do is check every other value in the array other than the one were on right now, 
			and force the program to come up with a new random until there are no repeat values*/
			if(x==0)//If we're on the first element...
			{
				while (order[x]==order[1] || order[x]==order[2] || order[x]==order[3] || order[x]==order[4] || order[x]==order[5]){//Check if its the same as any of the others...
					order[x] = RNG.nextInt(6)+4;//And pick a new value
				}
			}
			else if(x==1)//and so on
			{
				while (order[x]==order[0] || order[x]==order[2] || order[x]==order[3] || order[x]==order[4] || order[x]==order[5]){
					order[x] = RNG.nextInt(6)+4;
				}
			}
			else if(x==2)
			{
				while (order[x]==order[0] || order[x]==order[1] || order[x]==order[3] || order[x]==order[4] || order[x]==order[5]){
					order[x] = RNG.nextInt(6)+4;
				}
			}
			else if(x==3)
			{
				while (order[x]==order[0] || order[x]==order[1] || order[x]==order[2] || order[x]==order[4] || order[x]==order[5]){
					order[x] = RNG.nextInt(6)+4;
				}
			}
			else if(x==4)
			{
				while (order[x]==order[0] || order[x]==order[1] || order[x]==order[2] || order[x]==order[3] || order[x]==order[5]){
					order[x] = RNG.nextInt(6)+4;
				}
			}
			else if(x==5)
			{
				while (order[x]==order[0] || order[x]==order[1] || order[x]==order[2] || order[x]==order[3] || order[x]==order[4]){
					order[x] = RNG.nextInt(6)+4;
				}
			}			
		}
    }

    public static void main(String[] args){
       	try{
			stream = new FileInputStream("font/burrito.ttf");//Import the custom Mario font
			burrito = Font.createFont(Font.TRUETYPE_FONT, stream);
			stream = new FileInputStream("font/Roboto-MediumItalic.ttf");//Import our next font
			roboto = Font.createFont(Font.TRUETYPE_FONT, stream);
		}
		catch(FileNotFoundException e){}//Catch all the possible errors		
		catch(FontFormatException e){}
		catch(IOException e){}		
	    
	    /*This here is where our window comes from*/
	    javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {            	
            	createAndShowMenu();//Show the menu to start off
            }
        });   	
    }
}

/*This second class is for the keyPress events*/
class OwensFirstKeyListener extends KeyAdapter{//by "extends KeyAdapter" we mean that this class has all of Java's KeyAdapter code as well as the crap we've made
	public void keyPressed(KeyEvent e){//Called whenever a key is pressed

		WTS.level[WTS.xCord][WTS.yCord]=1;
		//All this means is that Waluigi's current spot becomes walkable floor. He's only ever on walkable floor so there's no problem here
		//This also makes sure his initial spawn point can be walked over again
	    if (e.getKeyCode()==KeyEvent.VK_DOWN)//If they pressed down.
	    {	    	
	    	WTS.dir = 3;
	    	ImageIcon icon = new ImageIcon("img/down.png");//Make waluigi face down in his current square. That way even if he can't move down 1 square he still faces that way
	        WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    	if(WTS.yCord+1 <15 && WTS.level[WTS.xCord][WTS.yCord+1]!=0 && WTS.level[WTS.xCord][WTS.yCord+1]!=3)//Check if he can move down 1
	    	{
	    		//Move Down
	    		icon = new ImageIcon("img/floor.png");//Import floor image
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);//Current spot becomes blank floor
	    		WTS.yCord = WTS.yCord+1;//Increase our yCord
	    		icon = new ImageIcon("img/down.png");//Import image of waluigi facing down
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);//Put him in the new spot

	        	if(WTS.level[WTS.xCord][WTS.yCord]!=1)//If we're not walking on normal floor, we've picked up a taco!
	        	{
	        		WTS.taco[0] = WTS.level[WTS.xCord][WTS.yCord];//add the value of whatever taco we're standing on (ew) to th efirst spot in the taco array, cause we sort it and the first spot is always empty        		
	        		WTS.taco = WTS.sort(WTS.taco);//sort the array again

	        		String tacoList = "      ";
	        		for (int x = 0; x<WTS.taco.length; x++) {//Loop through the taco array and add the name of each taco that we've picked up to a string
			        	if (WTS.taco[x]==4){
			        		tacoList+="Sonic Special, ";
			        	}
			        	else if (WTS.taco[x]==5){
			        		tacoList+="Game n Eat, ";
			        	}
			        	else if (WTS.taco[x]==6){
			        		tacoList+="Luigi's Lucky Taco, ";
			        	}
			        	else if (WTS.taco[x]==7){
			        		tacoList+="Signature, ";
			        	}
			        	else if (WTS.taco[x]==8){
			        		tacoList+="WAHpper, ";
			        	}
			        	else if (WTS.taco[x]==9){
			        		tacoList+="Flamin' Hot Fire Flower, ";
			        	}        
	        		}
	        		tacoList = tacoList.substring(0, tacoList.length()-2);//cut off the comma at the end
	        		WTS.tacoBox.setText(tacoList+"                                                                                                                                      ");//Change the text in the label below the "you have" one
	        	}
	    	}	    	
	    }
	    else if (e.getKeyCode()==KeyEvent.VK_UP)//If they pressed up.
	    {
	    	WTS.dir = 1;
	    	ImageIcon icon = new ImageIcon("img/up.png");//Import the up facing image, and set that to our current position
	        WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    	if(WTS.yCord-1 >=0 && WTS.level[WTS.xCord][WTS.yCord-1]!=0 && WTS.level[WTS.xCord][WTS.yCord-1]!=3)//check if we can move
	    	{
	    		//Move Up
	    		icon = new ImageIcon("img/floor.png");//Current spot becomes floor
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    		WTS.yCord = WTS.yCord-1;//Current y value goes down as we go up
	    		icon = new ImageIcon("img/up.png");//Put up-facing waluigi in the new spot
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);

	        	if(WTS.level[WTS.xCord][WTS.yCord]!=1)//This if statement is the same in each key-press event, its commented in the first one if youre interested
	        	{
	        		WTS.taco[0] = WTS.level[WTS.xCord][WTS.yCord];
	        		WTS.taco = WTS.sort(WTS.taco);
	        		String tacoList = "      ";
	        		for (int x = 0; x<WTS.taco.length; x++) {
			        	if (WTS.taco[x]==4){
			        		tacoList+="Sonic Special, ";
			        	}
			        	else if (WTS.taco[x]==5){
			        		tacoList+="Game n Eat, ";
			        	}
			        	else if (WTS.taco[x]==6){
			        		tacoList+="Luigi's Lucky Taco, ";
			        	}
			        	else if (WTS.taco[x]==7){
			        		tacoList+="Signature, ";
			        	}
			        	else if (WTS.taco[x]==8){
			        		tacoList+="WAHpper, ";
			        	}
			        	else if (WTS.taco[x]==9){
			        		tacoList+="Flamin' Hot Fire Flower, ";
			        	}        
	        		}
	        		tacoList = tacoList.substring(0, tacoList.length()-2);
	        		WTS.tacoBox.setText(tacoList+"                                                                                                                                      ");
	        	}
	    	}
	    }
	    else if (e.getKeyCode()==KeyEvent.VK_RIGHT)//If they pressed right
	    {
	    	WTS.dir = 2;
	    	ImageIcon icon = new ImageIcon("img/right.png");//Make waluigi face right
	        WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    	if(WTS.xCord+1 <15 && WTS.level[WTS.xCord+1][WTS.yCord]!=0 && WTS.level[WTS.xCord+1][WTS.yCord]!=3)//Check if we can move
	    	{
	    		//Move Right
	    		icon = new ImageIcon("img/floor.png");//Current spot becomes floor
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    		WTS.xCord = WTS.xCord+1;//x value goes up
	    		icon = new ImageIcon("img/right.png");//Right-facing waluigi in the new spot
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);

	        	if(WTS.level[WTS.xCord][WTS.yCord]!=1)//This if statement is the same in each key-press event, its commented in the first one if youre interested
	        	{
	        		WTS.taco[0] = WTS.level[WTS.xCord][WTS.yCord];
	        		WTS.taco = WTS.sort(WTS.taco);
	        		String tacoList = "      ";
	        		for (int x = 0; x<WTS.taco.length; x++) {
			        	if (WTS.taco[x]==4){
			        		tacoList+="Sonic Special, ";
			        	}
			        	else if (WTS.taco[x]==5){
			        		tacoList+="Game n Eat, ";
			        	}
			        	else if (WTS.taco[x]==6){
			        		tacoList+="Luigi's Lucky Taco, ";
			        	}
			        	else if (WTS.taco[x]==7){
			        		tacoList+="Signature, ";
			        	}
			        	else if (WTS.taco[x]==8){
			        		tacoList+="WAHpper, ";
			        	}
			        	else if (WTS.taco[x]==9){
			        		tacoList+="Flamin' Hot Fire Flower, ";
			        	}        
	        		}
	        		tacoList = tacoList.substring(0, tacoList.length()-2);
	        		WTS.tacoBox.setText(tacoList+"                                                                                                                                      ");
	        	}
	    	}
	    }
	    else if (e.getKeyCode()==KeyEvent.VK_LEFT)//If they pressed left
	    {
	    	WTS.dir = 4;
	    	ImageIcon icon = new ImageIcon("img/left.png");//turn him to the left
	        WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    	if(WTS.xCord-1 >=0 && WTS.level[WTS.xCord-1][WTS.yCord]!=0 && WTS.level[WTS.xCord-1][WTS.yCord]!=3)//Check if he can move left
	    	{
	    		//Move Left
	    		icon = new ImageIcon("img/floor.png");//Current spot becomes empty
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);
	    		WTS.xCord = WTS.xCord-1;//x value goes down
	    		icon = new ImageIcon("img/left.png");//left facing waluigi in the new spot
	        	WTS.labelGrid[WTS.xCord][WTS.yCord].setIcon(icon);

	        	if(WTS.level[WTS.xCord][WTS.yCord]!=1)//This if statement is the same in each key-press event, its commented in the first one if youre interested
	        	{
	        		WTS.taco[0] = WTS.level[WTS.xCord][WTS.yCord];
	        		WTS.taco = WTS.sort(WTS.taco);
	        		String tacoList = "      ";
	        		for (int x = 0; x<WTS.taco.length; x++) {
			        	if (WTS.taco[x]==4){
			        		tacoList+="Sonic Special, ";
			        	}
			        	else if (WTS.taco[x]==5){
			        		tacoList+="Game n Eat, ";
			        	}
			        	else if (WTS.taco[x]==6){
			        		tacoList+="Luigi's Lucky Taco, ";
			        	}
			        	else if (WTS.taco[x]==7){
			        		tacoList+="Signature, ";
			        	}
			        	else if (WTS.taco[x]==8){
			        		tacoList+="WAHpper, ";
			        	}
			        	else if (WTS.taco[x]==9){
			        		tacoList+="Flamin' Hot Fire Flower, ";
			        	}        
	        		}
	        		tacoList = tacoList.substring(0, tacoList.length()-2);
	        		WTS.tacoBox.setText(tacoList+"                                                                                                                                      ");
	        	}
	    	}
	    }
	    else if (e.getKeyCode()==KeyEvent.VK_ENTER)//If they press enter
	    {
	    	WTS.taco = WTS.sort(WTS.taco);//sort the taco array one last time
	    	if (WTS.dir==1){//Depending on direction, we check if the square waluigi is facing is mario
	    		if(WTS.level[WTS.xCord][WTS.yCord-1]==3){//if it is mario...
	    			if (Arrays.equals(WTS.taco, WTS.order)) {//check if we got his order right
	    				WTS.createAndShowYouWin();//if its right we win
	    			}
	    			else{
	    				WTS.createAndShowGameOver();//if not we lose
	    			}
	    		}
	    	}
	    	else if (WTS.dir==2){//next few cases are all the same, with slight tweaks as to which square me check for mario
	    		if(WTS.level[WTS.xCord+1][WTS.yCord]==3){
	    			if (Arrays.equals(WTS.taco, WTS.order)) {
	    				WTS.createAndShowYouWin();
	    			}
	    			else{
	    				WTS.createAndShowGameOver();
	    			}
	    		}
	    	}
	    	else if (WTS.dir==3){
	    		if(WTS.level[WTS.xCord][WTS.yCord+1]==3){
	    			if (Arrays.equals(WTS.taco, WTS.order)) {
	    				WTS.createAndShowYouWin();
	    			}
	    			else{
	    				WTS.createAndShowGameOver();
	    			}
	    		}
	    	}
	    	else if (WTS.dir==4){
	    		if(WTS.level[WTS.xCord-1][WTS.yCord]==3){
	    			if (Arrays.equals(WTS.taco, WTS.order)) {
	    				WTS.createAndShowYouWin();
	    			}
	    			else{
	    				WTS.createAndShowGameOver();
	    			}
	    		}
	    	}
	    }
	}
}